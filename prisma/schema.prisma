datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PLANS {
  FREE
  BASIC
  PRO
}

enum GeneratingState {
  GENERATED
  GENERATING
  DRAFT
  CANCELLED
}

model Article {
  id              String          @id @default(cuid())
  slug            String
  metaDescription String?
  keywords        String[]
  authorId        String
  title           String
  content         String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  author          User            @relation(fields: [authorId], references: [id])
  generationCost  Float           @default(2)
  generatingState GeneratingState @default(DRAFT)
  coverImage      String?
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  articles            Article[]
  accounts            Account[]
  sessions            Session[]
  payments            Payment[]
  credits             Int       @default(5)
  creditsUsed         Int       @default(0)
  plan                PLANS     @default(FREE)
  subscriptionId      String?
  subscriptionStatus  String?
  planId              String?
  currentPeriodEnd    DateTime?
  preferredTone       String?   @default("professional")
  targetAudience      String?
  onboardingCompleted Boolean   @default(false)
}

model Payment {
  id     String  @id @default(cuid())
  userId String
  isPaid Boolean @default(false)
  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
